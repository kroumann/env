
"===================================================================================
"         FILE:  .vimrc
"  DESCRIPTION:  this file contains my personal configuration of vimrc
"  		 inspired from Fritz Mehner suggestion 
"       AUTHOR:  M. KOUROUMA 
"      CREATED:  09.09.2016
"===================================================================================
"
"*****************************
"	GENERAL SETTINGS
"*****************************
"
"" VIM 
set nocompatible			" Use Vim settings, rather then Vi settings.
					" This must be first, because it changes 
					" other options 
					" as a side effect.
"install vim plug			" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
					"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

"" PLUGINS					
call plug#begin('~/.vim/plugged')	"  Specify a directory for plugins and initilize

					" should install plugins
					" call vundle#begin('~/some/path/here')
"Plugin 'VundleVim/Vundle.vim'		" let vundle manage vundle, this is required



" Plugin 'scrooloose/nerdtree'		" nerdtree for exploration
" Plugin 'preservim/nerdcommenter'	" comment lines,  functions,  blocks ...
" Plugin 'zeis/vim-kolor'			" optimal visibility of element within file
" Plugin 'majutsushi/tagbar'		"tagbar to browse tags of the current file and 
					" get overview of its struct.
Plug 'vim-airline/vim-airline'	" Lean & mean status/tabline for vim that's light as air.
Plug 'vim-airline/vim-airline-themes'	" airline themeg
Plug 'jistr/vim-nerdtree-tabs'	"NERDTree and tabs together in Vim, painlessly
"Plug 'vim-scripts/Conque-GDB'		" embed an interactive shell inside vim, that is used by GDB
"Plug 'scrooloose/syntastic'		" Syntastic is a syntax checking plugin for Vim
"Plug 'chazy/cscope_maps'          " Cscope for references and definitions search
Plug 'altercation/vim-colors-solarized' " Solarized color scheme for vim
Plug 'ctrlpvim/ctrlp.vim'				"Fuzzy file finder for vim
Plug 'junegunn/fzf.vim'	            " fzf love vim
"Plug 'rdnetto/YCM-Generator' 	    " script to generate compiler flags from a project
"Plug 'ycm-core/YouCompleteMe' 		" auto completion engine for vim
Plug 'prabirshrestha/async.vim'		" async jop control
Plug 'prabirshrestha/vim-lsp'			" vim-lsp
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'	" auto-completion with asyncomplete	
Plug 'prabirshrestha/asyncomplete-lsp.vim'    " auto-completion with asyncomplete
""Plug 'pdavydov108/vim-lsp-cquery'		"vim-lsp-cquery 
Plug 'mileszs/ack.vim'				" search in vim 
Plug 'SirVer/ultisnips'				"Snippets engine	
Plug 'honza/vim-snippets' 			"snippets
""Plug 'Yggdroot/indentLine'			" Displaying thin vertical lines at each indentation
call plug#end()				" Initialize plugin system
"
"
"
"
filetype  plugin on			" Enable file type detection. 
					" Use the default filetype 
					" settings.
filetype  indent on 			" Load indent files, to automatically do 
					" language-dependent indenting.
"
syntax  on  				" Switch syntax highlighting on.
"
"
"*******************************
"	 VARIOUS SETTINGS
"*******************************
"
set autoindent                  	" copy indent from current line
set autoread                    	" read open files again when changed outside Vim
set autowrite                   	" write a modified buffer on each :next , ...
set backspace=indent,eol,start  	" backspacing over everything in insert mode
set backup                      	" keep a backup file
set browsedir=current           	" which directory to use for the file browser
set complete+=k                 	" scan the files given with the 'dictionary' option
set encoding=utf-8					" Usually necessary to show unicode glyphs.
set history=50                  	" keep 50 lines of command line history
set hlsearch                    	" highlight the last used search pattern
set incsearch                   	" do incremental searching
set listchars=tab:>.,eol:\$     	" strings to use in 'list' mode
set laststatus=2					" always show the statusline.
set mouse=a                     	" enable the use of the mouse
set nowrap                      	" do not wrap lines
set number				" enable line numbering
set popt=left:8pc,right:3pc     	" print options
set ruler                       	" show the cursor position all the time
set shiftwidth=4                	" number of spaces to use for each step of indent
set showmatch						" show match in current file
set showcmd                     	" display incomplete commands
set smartindent                 	" smart autoindenting when starting a new line
set tabstop=4                   	" number of spaces that a <Tab> counts for
set noexpandtab						" use tab for tabulation not spaces
set t_Co=256						" enable 256 color in vim.
set ttyfast							" the current terminal is a fast terminal (to do more stuff at once)
set updatetime=1000					" Update time of many VIM things.(reasonable value)
set undofile						" save undo's file closes
set undodir=$HOME/.vim/undo			" where to save undo histories
set undolevels=1000					" how many undo is possible
set undoreload=1000					" number of lines to save for undo
set visualbell                 		" visual bell instead of beeping
set wildignore=*.bak,*.o,*.e,*~ 	" wildmenu: ignore these extensions
set wildmenu                    	" command-line completion in an enhanced mode
"
" show trailing whitespaces with a red bar
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/


"
"
" GENERAL CONFIGURATION
let mapleader=','			" change the leader key to colon. Much easier
"
"===================================================================================
" BUFFERS, WINDOWS
"===================================================================================
"
" Copy/Paste from PRIMARY register:
noremap <Leader>y "*y
noremap <Leader>p "*p
"
" Copy/Paste from CLIPBARD register:
noremap <Leader>Y "+y
noremap <Leader>P "+p
"
"
"-------------------------------------------------------------------------------
" Leave the editor with Ctrl-q (KDE): Write all changed buffers and exit Vim
"-------------------------------------------------------------------------------
nnoremap  <C-q>    :wqall<CR>
"
"-------------------------------------------------------------------------------
" The current directory is the directory of the file in the current window.
"-------------------------------------------------------------------------------
if has("autocmd")
  autocmd BufEnter * :lchdir %:p:h
endif
"
"-------------------------------------------------------------------------------
"Cleanup windows name when leaving vim as the next cmd rename windows
"-------------------------------------------------------------------------------

" if has("autocmd")
"	autocmd VimLeave * call system("tmux rename-window '" . expand("%:t") . "'")
"	autocmd VimLeave * Call system("tmux setw automatic-rename")
" endif


"------------------------------------------------------------------------------
" Tmux automatic windows rename with current editing file.
" This should be completed with some extra in tmux config file
" --------------------------------------------------------------------------
" let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
" if &term == "screen"
"  set t_ts=k
"  set t_fs=\
" endif
" if &term == "screen" || &term == "xterm"
"  set title
"  set titleold=
" endif

 if has("autocmd")
	 autocmd BufReadPost,FileReadPost,BufNewFile,TabEnter *
				 \ call system("tmux rename-window 'vim(" . expand("%:t") .")'")
	autocmd VimLeave *
				\ call system("tmux rename-window 'bash'")
"				\ call system("tmux rename-window '" . expand("%:p:h:t") ."'")
"	autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
"	set title
 endif
"-------------------------------------------------------------------------------
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
"-------------------------------------------------------------------------------
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
endif " has("autocmd")
"
"-------------------------------------------------------------------------------
" Leave the editor with Ctrl-q : Write all changed buffers and exit Vim
"-------------------------------------------------------------------------------
nmap  <C-q>    :wqa<CR>
nmap  <C-Q>    :wqa<CR>
"
"-------------------------------------------------------------------------------
" comma always followed by a space
"-------------------------------------------------------------------------------
inoremap  ,  ,<Space>
"
"-------------------------------------------------------------------------------
"  some additional hot keys
"-------------------------------------------------------------------------------
"    F2   -  write file without confirmation
"    F3   -  NERDCommenter toggle comment ON/OFF
"    F4   -  show tag under curser in the preview window (tagfile must exist!)
"    F5   -  open quickfix error window
"    F6   -  close quickfix error window
"    F7   -  display previous error
"    F8   -  display next error
"-------------------------------------------------------------------------------
"
map   <silent> <F2>        :write<CR>
map   <silent> <F3>        :call NERDComment('n', 'Toggle')<CR>j
nmap  <silent> <F4>        :exe ":ptag ".expand("<cword>")<CR>
map   <silent> <F5>        :copen<CR>
map   <silent> <F6>        :cclose<CR>
map   <silent> <F7>        :cp<CR>
map   <silent> <F8>        :cn<CR>
"
imap  <silent> <F2>   <Esc>:write<CR>
imap  <silent> <F3>   <Esc>:call NERDComment('n', 'Toggle')<CR>j
imap  <silent> <F4>   <Esc>:exe ":ptag ".expand("<cword>")<CR>
imap  <silent> <F5>   <Esc>:copen<CR>
imap  <silent> <F6>   <Esc>:cclose<CR>
imap  <silent> <F7>   <Esc>:cp<CR>
imap  <silent> <F8>   <Esc>:cn<CR>
"
"-------------------------------------------------------------------------------
" Fast switching between buffers
" The current buffer will be saved before switching to the next one.
" Choose :bprevious or :bnext
"-------------------------------------------------------------------------------
"
 map  <silent> <s-tab>  <Esc>:if &modifiable && !&readonly && 
     \                  &modified <CR> :write<CR> :endif<CR>:bprevious<CR>
imap  <silent> <s-tab>  <Esc>:if &modifiable && !&readonly && 
     \                  &modified <CR> :write<CR> :endif<CR>:bprevious<CR>
"
"-------------------------------------------------------------------------------

" Jump to opening closing parenthesis, square bracket or brace 
"-------------------------------------------------------------------------------
nnoremap % v%
"-------------------------------------------------------------------------------
" autocomplete parenthesis, brackets and braces
"-------------------------------------------------------------------------------
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap " ""<Left>
inoremap ' ''<Left>
"
vnoremap ( s()<Esc>P<Right>%
vnoremap [ s[]<Esc>P<Right>%
vnoremap { s{}<Esc>P<Right>%
"
"-------------------------------------------------------------------------------
" autocomplete quotes (visual and select mode)
"-------------------------------------------------------------------------------
xnoremap  '  s''<Esc>P<Right>
xnoremap  "  s""<Esc>P<Right>
xnoremap  `  s``<Esc>P<Right>
"
"-------------------------------------------------------------------------------
" VIM command mappings 
"-------------------------------------------------------------------------------
"
" ---------------set split position---------------------------------------------
 set splitbelow
 set splitright

 " --------------Split navigation management------------------------------------
 nmap <C-J> <C-W><C-J>  			" <Ctrl+J> go to split down
 nmap <C-K> <C-W><C-K>				" <Ctrl+K> go to split Up
 nmap <C-H> <C-W><C-H>  			" <Ctrl+H> go to split left
 nmap <C-L> <C-W><C-L>  			" <Ctrl+L> go to split right
 
" ------------- editing config files ---------------
 nmap <leader>ev :tabedit $MYVIMRC<cr> 		" edit my vimrc file
 noremap <leader>sv :so $MYVIMRC<cr>		" source vimrc file when done editing
 nmap <leader>et :tabedit ~/.tmux.conf<cr> 	" edit my tmux config file

" -------------auto-commands ------------------------
if has ('autocmd')				"Remain compatible with earlier version
 augroup vimrc  
	autocmd! BufWritePost $MYVIMRC source % | echom "reloaded " . $MYVIMRC | redraw	" automatic source the vimrc on save.
 augroup END  
 endif 				"has autocmd
"
"----------------------------------- vim-lsp-----------------------------------
" make sur cquery is installed. infos in : https://github.com/jacobdufault/cquery
let g:lsp_auto_enable = 1
" We don't want our quickfix list always spammed with diagnostics
let g:lsp_diagnostics_enabled = 0
" highlight references to the symbol under the cursor
let g:lsp_highlight_references_enabled = 1

" vim-lsp logging for debug purpose
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/vim-lsp.log')

" per-buffer stuff
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
	"refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
"-------------------------- cquery c/c++ -----------------------------------
" cquery registering in .vimrc
if executable('cquery')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'cquery',
      \ 'cmd': {server_info->['cquery']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': { 'cacheDirectory': '/tmp/cquery/cache' },
      \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
     \ })
 endif

"*******************************
" VARIOUS PLUGIN CONFIGURATIONS
"*******************************
"
" Make CtrlP uses ripgrep (rg) has its finding engin.
if executable('rg')
	let g:ctrl_user_command = 'rg %s --files --hidden --color=never --glob ""'
endif

" search through opened buffers using ctrlP
nnoremap <Leader>b :CtrlPBuffer<CR>

" zsh as default shell
set shell=/usr/bin/zsh

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'


"" SOLARIZED
"let g:solarized_termcolors=256 		"16/256
"let g:solarized_termtrans=1
"let g:solarized_degrade=0 		"For test purpose only
"let g:solarized_bold=1
"let g:solarized_underline=0
"let g:solarized_italic=1
"let g:solarized_contrast="high" 	"low/normal/high
"let g:solarized_visibility="high" 	"low/normal/high
"call togglebg#map("<F9>")
"
"" C-SUPPORT
let g:C_MapLeader = ','
"
"" PLUGIN Kolor
"let g:kolor_italic=1                    " Enable italic. Default: 1
"let g:kolor_bold=1                      " Enable bold. Default: 1
"let g:kolor_underlined=0                " Enable underline. Default: 0
"let g:kolor_alternative_matchparen=0    " Gray 'MatchParen' color. Default: 0

"" NERDTREE
map <leader>n :NERDTreeTabsToggle<CR>	" change leader key stroke
"let g:NERDTreeDirArrowExpandable = "▸"
"let g:NERDTreeDirArrowCollapsible = "▾"	

""TAGBAR
map <leader>tb :TagbarToggle<CR>	" tagbar toggling shortcut
"
"" PLUGIN VIM-AIRLINE
let g:airline#extensions#tabline#enable = 1	" Enable smarter tab line
"let g:airline#extensions#tabline#left_alt_sep = '>' " tab line separator
"let g:airline_powerline_fonts = 1	" please install powerline-fonts before using
					" this line.
let g:airline_left_sep = '▶'		" the separator used on the left side >
let g:airline_right_sep = '◀'		" the separator used on the right side <
	
"" CTAGS + CSCOPE
" let &tags=$CTAGS_DB
"
"" YOUCOMPLETEME
let g:ycm_server_python_interpreter = '/usr/bin/python3'

"" SYNTASTIC 
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"let g:airline_section_c = airline#section#create('%t')
	
"" CONQUEGDB
let g:ConqueGdb_Leader = '/'

"" VIM LSP (Language server protocol) cquery
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fv :LspCqueryDerived<CR>
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fc :LspCqueryCallers<CR>
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fb :LspCqueryBase<CR>
autocmd FileType c,cc,cpp,cxx,h,hpp nnoremap <leader>fi :LspCqueryVars<CR>

" navigate in tabs with arrows 
noremap <leader>h gT
noremap <leader>l gt
"nnoremap <C-Left> :tabprevious<CR>
"nnoremap <C-Right> :tabnext<CR>


"" COLOR SCHEME
syntax enable
"set background=dark			" quite a bit easier to read under direct sunlight.
"colorscheme solarized		   	" this is my favorite one ;-)

